"use strict";function _typeof(e){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof(e)}!function(e){function t(){e(".emsh-sortable-wrap").sortable("instance")?e(".emsh-sortable-wrap").sortable("refresh"):e(".emsh-sortable-wrap").sortable({axis:"y",items:".emsh-single-sortable-item:not(.counter-0)"})}function n(e){return null!==e&&("function"==typeof e||"object"===_typeof(e))}function s(){e('input[type=submit][name="publish"]').length?e('input[type=submit][name="publish"]').click():e('input[type=submit][name="save"]').click()}e(document).ready((function(){var n=e('.toplevel_page_emsh ul li a[href="admin.php?page=emsh-template-group-category"]');n.length&&n.attr("href").includes("category")&&n.attr("href","edit-tags.php?taxonomy=emsh-template-group-category&post_type=emsh-template-groups"),t(),e.fn.selectWoo&&e(".emsh_multiple").selectWoo()})),e(document).on("change",".template_type_selector select",(function(t){var n=this.value,s=e(this).closest(".emsh-admin");s.find(".form-group:not(.template_type_selector)").hide(),"specific_cats"===n?s.find(".category_selector").show():"specific_templates"===n&&s.find(".template_selector").show()})),e(document).on("click","button.license-generator",(function(t){t.preventDefault();var n=function(e){for(var t="",n="0123456789abcdefghijklmnopqrstuvwxyz",s=0;s<e;s++)t+=n[Math.floor(Math.random()*n.length)];return CryptoJS.MD5("emsh"+(new Date).getTime()+t).toString()}(16);e(this).parent().find("#license_key").val(n)})),e(document).on("click",".cpy-btn",(function(t){t.preventDefault();var n=e(this).parent().find("#license_key"),s=n.val();n[0].focus(),n[0].select(),navigator.clipboard.writeText(s)})),e(document).on("click",".connect-btn",(function(t){t.preventDefault();var i=e(this);if(e(".emsh-notice").hide(),""===i.attr("data-status")||"notconnected"===i.attr("data-status")){if(e("#emsh_site_license_key").val()&&e("#emsh_site_url").val()){i.html(i.attr("data-connecting"));var a={action:"emsh_connect",license_key:e("#emsh_site_license_key").val(),site_url:e("#emsh_site_url").val()};i.attr("disabled",!0),e.post(ajaxurl,a,(function(t){t&&"success"in t&&t.success?(i.html(i.attr("data-disconnect")),i.attr("data-status","connected"),e(".emsh-notice").hide(),e(".emsh-notice.notice-success").html(t.message).show(),e('input[name="emsh_connection_status"]').val("connected"),"expiry_date"in t&&e('input[name="emsh_site_expiry_date"]').val(t.expiry_date),s()):(i.html(i.attr("data-connect")),i.attr("data-status","notconnected"),n(t)&&"message"in t&&(e(".emsh-notice").hide(),e(".emsh-notice.notice-error").html(t.message).show()),e('input[name="emsh_connection_status"]').val("notconnected")),i.attr("disabled",!1)}))}}else if(e("#emsh_site_license_key").val()&&e("#emsh_site_url").val()){i.html(i.attr("data-disconnecting"));a={action:"emsh_disconnect",license_key:e("#emsh_site_license_key").val(),site_url:e("#emsh_site_url").val()};i.attr("disabled",!0),e.post(ajaxurl,a,(function(t){t&&"success"in t&&t.success?(i.html(i.attr("data-connect")),i.attr("data-status","notconnected"),e(".emsh-notice").hide(),e(".emsh-notice.notice-success").html(t.message).show(),e('input[name="emsh_connection_status"]').val("notconnected"),e('input[name="emsh_site_expiry_date"]').val(""),s()):(i.html(i.attr("data-disconnect")),i.attr("data-status","connected"),n(t)&&"message"in t&&(e(".emsh-notice").hide(),e(".emsh-notice.notice-error").html(t.message).show()),e('input[name="emsh_connection_status"]').val("connected")),i.attr("disabled",!1)}))}})),e(document).on("click",".server-disconnect",(function(t){if(t.preventDefault(),confirm(emsh_admin.areyousure)&&e("#license_key").val()){e(".emsh-notice").hide();var i=e(this),a={action:"emsh_revoke_site",site_url:i.parent().find("a").html(),license_key:e("#license_key").val()};i.attr("disabled",!0),e.post(ajaxurl,a,(function(t){t&&"success"in t&&t.success?s():(e(".emsh-notice").hide(),n(t)&&"message"in t&&e(".emsh-notice.notice-error").html(t.message).show()),i.attr("disabled",!1)}))}})),e(document).on("click",".server-block.disabled",(function(e){e.preventDefault()})),e(document).on("click",".server-block:not(.disabled)",(function(t){if(t.preventDefault(),confirm(emsh_admin.areyousure)&&e("#license_key").val()){e(".emsh-notice").hide();var i=e(this),a={action:"emsh_block_site",site_url:i.parent().find("a").html(),license_key:e("#license_key").val()};i.attr("disabled",!0),e.post(ajaxurl,a,(function(t){t&&"success"in t&&t.success?s():(e(".emsh-notice").hide(),n(t)&&"message"in t&&e(".emsh-notice.notice-error").html(t.message).show()),i.attr("disabled",!1)}))}})),e(document).on("click",".server-unblock",(function(t){if(t.preventDefault(),confirm(emsh_admin.areyousure)&&e("#license_key").val()){e(".emsh-notice").hide();var i=e(this),a={action:"emsh_unblock_site",site_url:i.parent().find("a").html(),license_key:e("#license_key").val()};i.attr("disabled",!0),e.post(ajaxurl,a,(function(t){t&&"success"in t&&t.success?s():(e(".emsh-notice").hide(),n(t)&&"message"in t&&e(".emsh-notice.notice-error").html(t.message).show()),i.attr("disabled",!1)}))}})),e(document).on("click",".addsortableitem",(function(n){n.preventDefault();var s=e(this).parent().find(".emsh-single-sortable-item:last").clone();s.appendTo(e(".emsh-sortable-wrap")).removeClass("counter-0").find(".url-data a").hide(),s.find(".tg-delete-item").show(),s.find("input").val(""),t()})),e(document).on("change","#emsh_template_group_templates",(function(t){e(this).parent().find(".url-data a").hide(),e(this).parent().find(".url-data a[data-id="+this.value+"]").show()})),e(document).on("click",".tg-delete-item",(function(t){t.preventDefault(),confirm(emsh_admin.areyousure)&&e(this).closest(".emsh-single-sortable-item").remove()}))}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,